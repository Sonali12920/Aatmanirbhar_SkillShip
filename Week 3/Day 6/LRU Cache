https://leetcode.com/problems/lru-cache/

 LRU Cache

 Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.
get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.
Follow up:
Could you do both operations in O(1) time complexity?

Example:
LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4


Solution:

class LRUCache {
public:
    map<int,pair<int,int>> mp;
    int i, c;
    LRUCache(int capacity) {
        c=capacity;
        i=0;
    }
    
    int get(int key) {
        if(mp.find(key)!=mp.end()) {
            int v=mp[key].first;
            mp[key]=make_pair(v,++i);
            return
                mp[key].first;
        }
        return -1;
    }
    
    void put(int key, int value) {
         if(mp.size()==c && mp.find(key)==mp.end()) {
            int x=INT_MAX,y=0;
            for(auto& j: mp) {
                pair<int,int> z=j.second;
                if(x>z.second) {
                    x=z.second;
                    y=j.first;
                }
            }
            mp.erase(y);
        }
        
        mp[key] = make_pair(value,++i);
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */