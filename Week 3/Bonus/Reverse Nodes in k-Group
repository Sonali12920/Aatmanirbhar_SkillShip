https://leetcode.com/problems/reverse-nodes-in-k-group/

 Reverse Nodes in k-Group

Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5
For k = 2, you should return: 2->1->4->3->5
For k = 3, you should return: 3->2->1->4->5



Solution:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head==NULL)
            return head;
        
        int l=0;
        ListNode* cur = head;
        while(cur){
            cur=cur->next;
            l++;
            if(l>=k)
                break;
        }
        
        if(l<k)
            return head;
        
        cur=head;
        ListNode* nxt;
        ListNode* prev = NULL;
        int count = k;
        while( count && cur!=NULL){
            nxt = cur->next;
            cur->next=prev;
            prev=cur;
            cur=nxt;
            count--;
        }
        if(head!=NULL)
            head->next=reverseKGroup(nxt,k);
        return prev;
    }  
};