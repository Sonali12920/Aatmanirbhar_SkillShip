https://leetcode.com/problems/search-in-rotated-sorted-array/

Search in Rotated Sorted Array

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1


Solution:

class Solution {
public:
    int search(vector<int>& nums, int target) {
           int l=0; 
           int h=nums.size()-1;
              while(l<h) {
                int mid = (l+h)/2;
                    if (nums[mid]==target) 
                        return mid;
                    else {
                       if (nums[l]<nums[h]){
                          if(target>nums[mid])
                              l=mid+1;
                          if(target<nums[mid])
                              h=mid-1;
                      }
                     else if (nums[mid]>nums[l]) {
                          if(target>=nums[l] && target<=nums[mid-1])
                              h = mid-1;
                          else 
                              l = mid+1;
                       }
                     else if (nums[mid]<=nums[l]) {
                             if(target>=nums[mid+1] && target<=nums[h])
                                 l = mid+1;
                             else 
                                 h = mid-1;
                         }
                  }
              }
             if (l==h && l<nums.size() && nums[l]==target) 
                 return l;
             else 
                 return -1; 
    }
};