https://leetcode.com/problems/self-dividing-numbers

Self Dividing Numbers

A self-dividing number is a number that is divisible by every digit it contains.
For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.
Also, a self-dividing number is not allowed to contain the digit zero.
Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.
Example 1:
Input: 
left = 1, right = 22
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]


Solution:

//Efficient Solution
class Solution {
public:
    vector<int> selfDividingNumbers(int left, int right) {
        vector<int>res;
        for(int i=left;i<=right;i++){
            int m=0;
            int n=0;
            int temp=i;
            while(temp>0){
                m++;
                int x=0;
                x=temp%10;
                if(x>0 && (i%x)==0 ){
                    n++;
                }
                temp=temp/10;
            }
            if(m==n){
                 res.push_back(i); 
            }
            m=0;
            n=0;
        }
        return res;
      }    
};


//Alternate Solution:
class Solution {
public:
    vector<int> selfDividingNumbers(int left, int right) {
        vector<int> res;
         for (int i=left; i<=right; i++) {
            if (selfDivide(i)) 
                res.push_back(i);
        }
        return res;
    }
    bool selfDivide(int n) {
        int temp = n;
        while (temp > 0) {
            int x= temp % 10;
            temp /= 10;
            if (x == 0 || (n % x) > 0)
                return false;
        }
        return true;
    }
};        