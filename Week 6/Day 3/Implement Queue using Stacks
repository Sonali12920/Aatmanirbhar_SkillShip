https://leetcode.com/problems/implement-queue-using-stacks/

Implement Queue using Stacks

Solution:

class MyQueue {
public:
    
  stack<int> s1;
  stack<int> s2;
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
         s1.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
          if(s1.size()==0 && s2.size()==0){
            return -1;
        }
        else if(s2.size()==0){
            while(!s1.empty()){
                int x=s1.top();
                s1.pop();
                s2.push(x);
            }
            int x=s2.top();
            s2.pop();
            return x;
            
        }
        else{
            int x=s2.top();
            s2.pop();
            return x;
        }
    }
    
    /** Get the front element. */
    int peek() {
         if(!s2.empty())
        return s2.top();
        else{
            while(!s1.empty()){
                int x=s1.top();
                s1.pop();
                s2.push(x);
            }
            return s2.top();
        }
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
          if(s1.empty() && s2.empty())
            return true;
        else
            return false;
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */